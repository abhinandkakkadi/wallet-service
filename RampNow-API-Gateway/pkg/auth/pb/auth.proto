syntax = "proto3";

package auth;

option go_package = "./pkg/auth/pb";

service AuthService {
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc Validate(ValidateRequest) returns (ValidateResponse) {}
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {}
  rpc FindUser(FindUserRequest) returns (FindUserResponse) {}
  rpc TokenRefresh(TokenRefreshRequest) returns (TokenRefreshResponse) {}
}

// Register

message RegisterRequest {
  string full_name = 6;
  string ramp_id = 7;
  string email = 4;
  string password = 5;
}

message RegisterResponse {
  int64 status = 1;
  int64 id = 2;
  string error = 3;
}

// Login

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  int64 status = 1;
  string error = 2;
  string access_token = 3;
  string refressh_token = 4;
}



message ValidateRequest { string token = 1; }

message ValidateResponse {
  int64 status = 1;
  string error = 2;
  int64 userId = 3;
  string source = 4;
}


// GetUsers

message GetUsersRequest {}
message GetUsersResponse {
  int64 status = 1;
  string error = 2;
  repeated User user = 3;
}

message User {
  int64 id = 1;
  string full_name = 6;
  string email = 5;
  string ramp_id = 7;
}


// FindUser

message FindUser {
  int64 id = 1;
  string user_name = 2;
  string full_name = 6;
  string email = 5;
  string ramp_id = 7;
}

message FindUserRequest { int64 id = 1; }

message FindUserResponse {
  int64 status = 1;
  string error = 2;
  FindUser data = 3;
}

// TokenRefresh

message TokenRefreshRequest { string token = 1; }

message TokenRefreshResponse {
  int64 status = 1;
  string error = 2;
  string token = 3;
}